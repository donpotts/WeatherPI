@using System.Security.Claims
@using WeatherPI.Shared.Blazor.Components.Themes
@inject AppService AppService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IStorageService LocalStorageService

<MudThemeProvider Theme="_theme" IsDarkMode="_isDarkMode" />
<MudAppBar Color="MudBlazor.Color.Inherit">
    @if (!CheckedVariable)
    {
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="MudBlazor.Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
    }
    <MudText Class="d-flex mr-8">Weather Raspberry PI</MudText>
    <MudHidden Breakpoint="Breakpoint.SmAndUp" Invert="true">
        <MudTooltip Text="@tooltipText">    
            <MudSwitch T="bool" Class="d-flex justify-content-start " Value="CheckedVariable" ValueChanged="@(e => OnSwitchValueChanged((bool)e))" Color="MudBlazor.Color.Success" UncheckedColor="MudBlazor.Color.Secondary" />
        </MudTooltip>
    </MudHidden>
    <MudSpacer />
    <MudHidden Breakpoint="Breakpoint.SmAndUp" Invert="true" IsHiddenChanged="ScreenSizeChanged">
    @if (CheckedVariable)
    {
        <MudToolBar>
                <MudLink Href="/" Class="d-flex px-4" Color="MudBlazor.Color.Inherit">Home</MudLink>
            <AuthorizeView>
                    <MudLink Href="/weatherpidata" Class="d-flex px-4" Color="MudBlazor.Color.Inherit">Weather PI Data</MudLink>

            </AuthorizeView>
            <AuthorizeView Roles="Administrator">
                    <MudLink Href="/user" Class="d-flex px-4" Color="MudBlazor.Color.Inherit">User</MudLink>
            </AuthorizeView>
            <AuthorizeView>
                <Authorized>
                        <MudLink Href="/account/changePassword" Class="d-flex px-4" Color="MudBlazor.Color.Inherit">Change Password</MudLink>
                        <MudLink Href="/logout" Class="d-flex px-4" Color="MudBlazor.Color.Inherit">Logout (@context.User.Identity!.Name)</MudLink>
                </Authorized>
                <NotAuthorized>
                        <MudLink Href="/register" Class="d-flex px-4" Color="MudBlazor.Color.Inherit">Register</MudLink>
                        <MudLink Href="/login" Class="d-flex px-4" Color="MudBlazor.Color.Inherit">Login</MudLink>
                </NotAuthorized>
            </AuthorizeView>
        </MudToolBar>
    }
    </MudHidden>
    <ThemesMenu @bind-ThemingDrawerOpen="_themingDrawerOpen"
            ThemeManager="_themeManager"
            ThemeManagerChanged="ThemeManagerChanged" />

    <MudLink OnClick="@(() => _themingDrawerOpen = true)" Color="MudBlazor.Color.Inherit">
        <MudTooltip Arrow="true"
                Placement="Placement.Left"
                Text="Themes">
        <MudIcon Icon="@Icons.Material.Outlined.Brush"
                     Color="MudBlazor.Color.Inherit"
                Class="mr-5"/>
        </MudTooltip>
    </MudLink>
    <MudLink Href="https://www.donpotts.com/" Color="MudBlazor.Color.Inherit">About</MudLink>
</MudAppBar>
@if (!CheckedVariable)
{
    <MudDrawer @bind-Open="drawerOpen" ClipMode="DrawerClipMode.Docked" Color="MudBlazor.Color.Inherit">
        <MudNavLink Href="/" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>
        <AuthorizeView>
            <MudNavLink Href="/weatherpidata" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.TableChart">Weather PI Data</MudNavLink>

        </AuthorizeView>
        <AuthorizeView Roles="Administrator">
            <MudNavLink Href="/user" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.People">User</MudNavLink>
        </AuthorizeView>
        <AuthorizeView>
            <Authorized>
                <MudNavLink Href="/account/changePassword" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Edit">Change Password</MudNavLink>
                <MudNavLink Href="/logout" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Logout">Logout (@context.User.Identity!.Name)</MudNavLink>
            </Authorized>
            <NotAuthorized>
                <MudNavLink Href="/register" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Edit">Register</MudNavLink>
                <MudNavLink Href="/login" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Login">Login</MudNavLink>
            </NotAuthorized>
        </AuthorizeView>
    </MudDrawer>
}

@code {
    private bool drawerOpen = true;
    bool _dark = true;
    private bool isDarkMode;
    private MudThemeProvider? mudThemeProvider;
    private bool isSwitchChecked;
    private bool CheckedVariable;
    private string tooltipText => isSwitchChecked ? "Top Menu ON" : "Top Menu is OFF";

    private bool _themingDrawerOpen;

    private MudTheme _theme = new();
    private bool _isDarkMode = false;

    private ThemeManagerModel _themeManager = new()
    {
        IsDarkMode = false,
        PrimaryColor = "#594AE2",
    };

    private async Task UpdateThemeManagerLocalStorage()
    {
        await LocalStorageService.SetAsync("themeManager", _themeManager);
    }

    private async Task ThemeManagerChanged(ThemeManagerModel themeManager)
    {
        _themeManager = themeManager;

        _isDarkMode = _themeManager.IsDarkMode;

        _theme = new MudTheme()
        {
            PaletteLight = new PaletteLight()
            {
                Primary = _themeManager.PrimaryColor,
                AppbarBackground = _themeManager.PrimaryColor,
            },
            PaletteDark = new PaletteDark()
            {
                Primary = _themeManager.PrimaryColor,
            }
        };

        await UpdateThemeManagerLocalStorage();
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        _themeManager = await LocalStorageService.GetAsync<ThemeManagerModel>("themeManager")
            ?? new()
            {
                IsDarkMode = false,
                PrimaryColor = "#594AE2",
            };

        await ThemeManagerChanged(_themeManager);

    }
    private void DrawerToggle()
    {
        drawerOpen = !drawerOpen;
    }

    public void ScreenSizeChanged(bool hidden)
    {
        if (hidden)
            CheckedVariable = false;
        else
            CheckedVariable = isSwitchChecked;
    }

    public void OnSwitchValueChanged(bool checkedValue)
    {
        CheckedVariable = checkedValue;
        if (checkedValue)
            isSwitchChecked = true;
        else
            isSwitchChecked = false;
    }
                                                        
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && mudThemeProvider != null)
        {
            isDarkMode = await mudThemeProvider.GetSystemPreference();
            StateHasChanged();

            await mudThemeProvider.WatchSystemPreference(OnSystemPreferenceChanged);
        }
    }

    protected Task OnSystemPreferenceChanged(bool isDarkMode)
    {
        this.isDarkMode = isDarkMode;
        StateHasChanged();

        return Task.CompletedTask;
    }
}
