@page "/weatherpidata"
@inject AppService AppService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime
@attribute [Authorize]

<PageTitle>Weather PI Data</PageTitle>

<div class="mb-3">
    <MudText Typo="Typo.h3">Weather PI Data</MudText>
</div>

@if (Data != null && Data.Count > 0)
{
    <MudGrid>
        <MudItem xs="12" sm="6">
            <ApexChart TItem="WeatherPIData"
                        Title="Temperature"
                        Width="700"
                        Height="700"
                        Options=options
                        @ref="chart">
                <ChildContent>
                    @foreach (var stationGroup in Data.GroupBy(d => d.StationId))
                    {
                        <ApexPointSeries TItem="WeatherPIData"
                                            Items="stationGroup.ToList()"
                                            Name="@stationGroup.First().Name"
                                            SeriesType="SeriesType.Line"
                                            XValue="d => d.DateTime"
                                            YValue="d => d.Temperature"
                                            ShowDataLabels />
                    }
                </ChildContent>
            </ApexChart>
        </MudItem>
        <MudItem xs="12" sm="6">
            <ApexChart TItem="WeatherPIData"
                        Title="Humidity"
                        Width="700"
                        Height="700"
                        Options=options2
                        @ref="chart2">
                <ChildContent>
                    @foreach (var stationGroup in Data2.GroupBy(d => d.StationId))
                    {
                        <ApexPointSeries TItem="WeatherPIData"
                                            Items="stationGroup.ToList()"
                                            Name="@stationGroup.First().Name"
                                            SeriesType="SeriesType.Line"
                                            XValue="d => d.DateTime"
                                            YValue="d => d.RelativeHumidity"
                                            ShowDataLabels />
                    }
                </ChildContent>
            </ApexChart>
        </MudItem>
    </MudGrid>
}

<MudStack AlignItems="AlignItems.End" Class="mb-3">
    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.AddCircleOutline" Color="MudBlazor.Color.Primary" OnClick="@(e => OnAdd())">Add</MudButton>
</MudStack>

<MudDataGrid T="WeatherPIData" @ref="grid" ServerData="(new Func<GridState<WeatherPIData>, Task<GridData<WeatherPIData>>>(ServerReload))" Filterable="true">
    <ToolBarContent>
         <MudSpacer />
         <MudTextField T="string" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="MudBlazor.Size.Medium" Class="mt-0" Immediate="true" ValueChanged="@(value => SearchChanged(value))"></MudTextField>
         <MudButton Color="MudBlazor.Color.Primary" OnClick="ExportAllToCSV">Export</MudButton>
    </ToolBarContent>
    <Columns>
        @* <PropertyColumn Property="x => x!.Id" Title="Id" /> *@
        <PropertyColumn Property="x => x!.StationId" Title="StationId" />
        <PropertyColumn Property="x => x!.Name" Title="Name" />
        @* <PropertyColumn Property="x => x!.Latitude" Title="Latitude" Format="F2"/>
        <PropertyColumn Property="x => x!.Longitude" Title="Longitude" Format="F2"/> *@
        <PropertyColumn Property="x => x!.Temperature" Title="Temperature" Format="F2"/>
        <PropertyColumn Property="x => x!.RelativeHumidity" Title="Relative Humidity" Format="F2"/>
        <PropertyColumn Property="x => x!.BarometricPressure" Title="Barometric Pressure" Format="F2"/>
        <PropertyColumn Property="x => x!.DateTime" Title="Date Time" />
        <PropertyColumn Property="x => x!.Notes" Title="Notes" />
        <TemplateColumn Style="width: 50px;" StickyRight="true" Sortable="false" Filterable="false">
            <CellTemplate>
                <MudStack Row="true">
                    <MudIconButton Icon="@Icons.Material.Outlined.Edit" Size="@MudBlazor.Size.Small" title="Edit" OnClick="@(e => OnEdit(context.Item!))" />
                    <MudIconButton Icon="@Icons.Material.Outlined.Delete" Size="@MudBlazor.Size.Small" title="Delete" OnClick="@(e => OnDelete(context.Item!))" />
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="WeatherPIData" />
    </PagerContent>
</MudDataGrid>

<script>
    window.downloadFromBase64 = function (base64, filename) {
        var a = document.createElement("a");
        document.body.appendChild(a);
        a.style = "display: none";
        var byteCharacters = atob(base64);
        var byteNumbers = new Array(byteCharacters.length);
        for (var i = 0; i < byteCharacters.length; i++) {
            byteNumbers[i] = byteCharacters.charCodeAt(i);
        }
        var byteArray = new Uint8Array(byteNumbers);
        var blob = new Blob([byteArray], { type: "application/octet-stream" });
        var url = window.URL.createObjectURL(blob);
        a.href = url;
        a.download = filename;
        a.click();
        window.URL.revokeObjectURL(url);
    };
</script>

@code {
    private MudDataGrid<WeatherPIData>? grid;

    private List<WeatherPIData> Data { get; set; } = new ();
    private List<WeatherPIData> Data2 { get; set; } = new();
    // {
    //     new WeatherPIData { StationId = 15, Name = "Raspberry PI 3b WeatherShield", Temperature = 57, RelativeHumidity = 88, BarometricPressure = 1003, DateTime = new DateTime(2024, 10, 12, 8, 10, 22), Notes = "Outside" },
    //     new WeatherPIData { StationId = 20, Name = "Raspberry PI 3b SunFounder", Temperature = 70, RelativeHumidity = 36, BarometricPressure = 989, DateTime = new DateTime(2024, 10, 12, 8, 6, 49), Notes = "Spare Bedroom" },
    //     new WeatherPIData { StationId = 10, Name = "Raspberry PI 3b SenseHat", Temperature = 67, RelativeHumidity = 49, BarometricPressure = 1003, DateTime = new DateTime(2024, 10, 12, 8, 6, 3), Notes = "Garage" },
    //     new WeatherPIData { StationId = 25, Name = "Raspberry PI 3b Balcony", Temperature = 55, RelativeHumidity = 70, BarometricPressure = 1010, DateTime = new DateTime(2024, 10, 12, 8, 11, 5), Notes = "Balcony" },
    //     new WeatherPIData { StationId = 30, Name = "Raspberry PI 3b Living Room", Temperature = 72, RelativeHumidity = 45, BarometricPressure = 1002, DateTime = new DateTime(2024, 10, 12, 8, 12, 1), Notes = "Living Room" },
    //     new WeatherPIData { StationId = 35, Name = "Raspberry PI 3b Basement", Temperature = 60, RelativeHumidity = 52, BarometricPressure = 1001, DateTime = new DateTime(2024, 10, 12, 8, 13, 45), Notes = "Basement" },
    //     new WeatherPIData { StationId = 15, Name = "Raspberry PI 3b WeatherShield", Temperature = 58, RelativeHumidity = 87, BarometricPressure = 1003, DateTime = new DateTime(2024, 10, 12, 8, 20, 22), Notes = "Outside" },
    //     new WeatherPIData { StationId = 20, Name = "Raspberry PI 3b SunFounder", Temperature = 71, RelativeHumidity = 35, BarometricPressure = 988, DateTime = new DateTime(2024, 10, 12, 8, 26, 49), Notes = "Spare Bedroom" },
    //     new WeatherPIData { StationId = 10, Name = "Raspberry PI 3b SenseHat", Temperature = 68, RelativeHumidity = 48, BarometricPressure = 1003, DateTime = new DateTime(2024, 10, 12, 8, 30, 3), Notes = "Garage" }
    // };

    public ApexChart<WeatherPIData> chart { get; set; } = new();
    public ApexChart<WeatherPIData> chart2 { get; set; } = new();
    public ApexChartOptions<WeatherPIData> options { get; set; } = new();
    public ApexChartOptions<WeatherPIData> options2 { get; set; } = new();

    private string? _searchString;

    private string GetAbsoluteUri(string uri)
    {
        if (!uri.StartsWith("/"))
        {
            return uri;
        }

        var baseUri = HttpClient.BaseAddress;

        if (baseUri == null)
        {
            throw new Exception("Unable to determine base address");
        }

        Uri absolute = new(baseUri, uri);

        return absolute.ToString();
    }

    private async Task<GridData<WeatherPIData>> ServerReload(GridState<WeatherPIData> state)
    {
        var top = state.PageSize;
        var skip = state.Page * state.PageSize;
        var orderby = ODataHelpers.GetOrderBy(state.SortDefinitions);
        var filter = ODataHelpers.GetFilter(state.FilterDefinitions);

        if (orderby == null)
            orderby = $"DateTime desc";

        AppService.ODataResult<WeatherPIData>? result = null;

        try
        {
            if (_searchString?.Length > 0)
            {
                bool isDecimal = decimal.TryParse(_searchString, out _);
                bool isDateTime = DateTime.TryParse(_searchString, out _);

                if (isDecimal)
                {
                    filter = $"Id eq {_searchString} or StationId eq {_searchString} or Latitude eq cast({_searchString},Edm.Decimal) or Longitude eq cast({_searchString},Edm.Decimal) or Temperature eq cast({_searchString},Edm.Decimal) or RelativeHumidity eq cast({_searchString},Edm.Decimal) or BarometricPressure eq cast({_searchString},Edm.Decimal)";
                }
                else if (isDateTime)
                {
                    filter = $"DateTime ge {_searchString}T00:00:00Z and DateTime le {_searchString}T23:59:59Z";
                }
                else
                {
                    filter = $"contains(tolower(Name), '{_searchString}')";
                }
            }

            result = await AppService.ListWeatherPIDataODataAsync(top, skip, orderby, filter, true, null);

            var itemList = result?.Value;

            Data = itemList.ToList();
            options = new ApexChartOptions<WeatherPIData>();
            await chart.UpdateOptionsAsync(true, true, true, null);

            Data2 = itemList.ToList();
            options2 = new ApexChartOptions<WeatherPIData>();
            await chart2.UpdateOptionsAsync(true, true, true, null);
            StateHasChanged();

        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }

        return new() { TotalItems = result?.Count ?? 0, Items = result?.Value ?? Enumerable.Empty<WeatherPIData>() };
    }

    private async void OnAdd()
    {
        DialogOptions dialogOptions = new() { FullWidth = true, CloseOnEscapeKey = true };

        var result = await DialogService.Show<AddWeatherPIData>("Add Weather PI Data", dialogOptions).Result;

        if (result != null && !result.Canceled)
        {
            await (grid?.ReloadServerData() ?? Task.CompletedTask);
        }
    }

    private async void OnEdit(WeatherPIData record)
    {
        DialogParameters<UpdateWeatherPIData> dialogParams = new() { { x => x.Id, record.Id!.Value } };
        DialogOptions dialogOptions = new() { FullWidth = true, CloseOnEscapeKey = true };

        var result = await DialogService.Show<UpdateWeatherPIData>("Update Weather PI Data", dialogParams, dialogOptions).Result;

        if (result != null && !result.Canceled)
        {
            await (grid?.ReloadServerData() ?? Task.CompletedTask);
        }
    }

    private async void OnDelete(WeatherPIData record)
    {
        var result = await DialogService.ShowMessageBox(
            "Warning",
            "Are you sure you want to delete this record?",
            "Delete",
            "Cancel");

        if (result.GetValueOrDefault(false))
        {
            try
            {
                await AppService.DeleteWeatherPIDataAsync(record.Id!.Value);
                await (grid?.ReloadServerData() ?? Task.CompletedTask);
            }
            catch (Exception ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
            }
        }
    }
    
    private void SearchChanged(string Value)
    {
        if (Value.EndsWith("."))
        {
            return;
        }
        _searchString = Value.ToString().ToLower();
        try
        {
            if (_searchString.Length > 7)
            {
                DateTimeOffset dateTime = DateTime.Parse(_searchString);
                _searchString = dateTime.ToString("yyyy-MM-dd");
                //Console.WriteLine(_searchString);
            }
        }
        catch
        {
            return;
        }
        grid?.ReloadServerData();
    }

    private async Task ExportAllToCSV()
    {
        AppService.ODataResult<WeatherPIData>? result = null;

        try
        {
            // Fetch all data from the OData service without any filters or restrictions
            result = await AppService.ListWeatherPIDataODataAsync(null, null, null, null, true, null);

            if (result != null && result?.Value != null)
            {
                var ar = result?.Value.ToList().Select(x => new
                {
                    x.Id,
                    x.StationId,
                    x.Name,
                    x.Latitude,
                    x.Longitude,
                    x.Temperature,
                    x.RelativeHumidity,
                    x.BarometricPressure,
                    x.DateTime,
                });

                using var memoryStream = new MemoryStream();
                using (var writer = new StreamWriter(memoryStream))
                using (var csv = new CsvWriter(writer, CultureInfo.InvariantCulture))
                {
                    csv.WriteRecords(ar); // use CSVHelper to write the records to the CSV file
                }
                // Convert MemoryStream to ByteArray
                var byteArray = memoryStream.ToArray();

                // Convert ByteArray to Base64String
                var base64 = Convert.ToBase64String(byteArray);

                // Trigger file download
                await JSRuntime.InvokeVoidAsync("downloadFromBase64", base64, "WeatherPIData_"+ System.DateTime.Now.ToString("yyyyMMddHHmmss") +".csv");
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }
 }
